// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/dashboard/advertencias/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/advertencias">> = Specific
  const handler = {} as typeof import("../../app/dashboard/advertencias/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/alunos/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/alunos">> = Specific
  const handler = {} as typeof import("../../app/dashboard/alunos/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/configuracoes/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/configuracoes">> = Specific
  const handler = {} as typeof import("../../app/dashboard/configuracoes/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/direcao/advertencias/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/direcao/advertencias">> = Specific
  const handler = {} as typeof import("../../app/dashboard/direcao/advertencias/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/equipamentos/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/equipamentos">> = Specific
  const handler = {} as typeof import("../../app/dashboard/equipamentos/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/professor/advertencias/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/professor/advertencias">> = Specific
  const handler = {} as typeof import("../../app/dashboard/professor/advertencias/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/relatorios/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/relatorios">> = Specific
  const handler = {} as typeof import("../../app/dashboard/relatorios/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/selecao/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/selecao">> = Specific
  const handler = {} as typeof import("../../app/dashboard/selecao/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/turmas/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/turmas">> = Specific
  const handler = {} as typeof import("../../app/dashboard/turmas/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../app/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/adv/gravity/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/adv/gravity">> = Specific
  const handler = {} as typeof import("../../app/api/adv/gravity/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/advertencias/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/advertencias/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/advertencias/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/advertencias/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/advertencias">> = Specific
  const handler = {} as typeof import("../../app/api/advertencias/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/equipamentos/[id]/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/equipamentos/[id]">> = Specific
  const handler = {} as typeof import("../../app/api/equipamentos/[id]/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/equipamentos/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/equipamentos">> = Specific
  const handler = {} as typeof import("../../app/api/equipamentos/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/equipamentos/totais/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/equipamentos/totais">> = Specific
  const handler = {} as typeof import("../../app/api/equipamentos/totais/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/groq/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/groq">> = Specific
  const handler = {} as typeof import("../../app/api/groq/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/turmas/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/turmas">> = Specific
  const handler = {} as typeof import("../../app/api/turmas/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/usuarios/config/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/usuarios/config">> = Specific
  const handler = {} as typeof import("../../app/api/usuarios/config/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/api/usuarios/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/usuarios">> = Specific
  const handler = {} as typeof import("../../app/api/usuarios/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../app/dashboard/direcao/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard/direcao">> = Specific
  const handler = {} as typeof import("../../app/dashboard/direcao/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../app/dashboard/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/dashboard/professor/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard/professor">> = Specific
  const handler = {} as typeof import("../../app/dashboard/professor/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
